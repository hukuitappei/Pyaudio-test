---
description: エラー予防とコード品質向上のためのルールとベストプラクティス
globs:
  - "**/*.py"
  - "**/*.ts"
  - "**/*.tsx"
  - "**/*.js"
  - "**/*.jsx"
alwaysApply: true
---

# エラー予防ルール

ファイル名: error-prevention.mdc
最終更新日時: 2025年1月現在

## 基本方針
コードの品質を向上させ、実行時エラーを予防するためのルールを定義します。
特にStreamlit CloudやNext.js等のデプロイ環境での問題を事前に防ぐことを重視します。

## シンタックスエラー予防

### Python
- **インデント管理**:
  - 4スペースを使用（タブは使用しない）
  - try-except文のインデントレベルを厳密に管理
  - コードブロック内の全ての行が適切なインデントレベルにあることを確認

- **構文チェック**:
  - コミット前に`python -m py_compile`でシンタックスチェック
  - VS CodeのPythonリンターを有効化
  - Black, autopep8等のフォーマッターを使用

### TypeScript/JavaScript
- **型安全性**:
  - `strict: true`を有効化
  - `noImplicitAny`を有効化
  - `any`の使用を禁止、`unknown`を使用

- **構文チェック**:
  - ESLintの設定を必須とする
  - Prettierでコード整形を自動化
  - TypeScriptコンパイラーでビルド前チェック

## 実行時エラー予防

### エラーハンドリング
- **必須のtry-catch**:
  - 外部API呼び出し（OpenAI, Google API等）
  - ファイル操作（読み書き、存在チェック）
  - ネットワーク通信
  - JSON解析処理

- **エラーメッセージの標準化**:
  - ユーザーフレンドリーなメッセージ
  - 日本語でのエラー説明
  - デバッグ情報の適切な出力レベル

### 入力検証
- **必須チェック項目**:
  - null/undefined値の確認
  - 文字列の空文字チェック
  - 数値の範囲チェック
  - ファイルパスの存在確認

## デプロイメント環境対応

### Streamlit Cloud
- **ファイル構造**:
  - メインファイルはルートディレクトリに配置
  - 依存ファイルの適切な配置
  - インポートパスの環境別対応

- **設定管理**:
  - 環境変数とStreamlit Secretsの両対応
  - 機密情報のハードコーディング禁止
  - .gitignoreでの適切な除外設定

### Next.js/Vercel
- **ビルドエラー予防**:
  - 型エラーの事前解決
  - 未使用インポートの除去
  - 動的インポートの適切な実装

## コード品質チェック

### 開発時チェック
- **リンター設定**:
  - Python: flake8, pylint, mypy
  - TypeScript: ESLint, TypeScript Compiler
  - 自動修正可能な問題は自動修正

- **フォーマッター設定**:
  - Python: Black, isort
  - TypeScript/JavaScript: Prettier
  - 保存時の自動フォーマット有効化

### Git Hooks
- **pre-commit**:
  - リンターチェック
  - フォーマッターチェック
  - テスト実行
  - コミットメッセージの検証

- **pre-push**:
  - ビルドテスト
  - 型チェック
  - セキュリティスキャン

## 特定エラーパターンの予防

### インデントエラー（Python）
```python
# ❌ 悪い例
try:
    # 処理
    if condition:
        do_something()
        
# この行のインデントが間違っている
another_function()

# ✅ 良い例
try:
    # 処理
    if condition:
        do_something()
    
    # 正しいインデントレベル
    another_function()
except Exception as e:
    handle_error(e)
```

### 型エラー（TypeScript）
```typescript
// ❌ 悪い例
function processData(data: any) {
    return data.someProperty;
}

// ✅ 良い例
interface DataType {
    someProperty: string;
}

function processData(data: DataType): string {
    return data.someProperty;
}
```

### 環境変数エラー
```python
# ❌ 悪い例
api_key = os.getenv("API_KEY")
client = OpenAI(api_key=api_key)  # api_keyがNoneの場合エラー

# ✅ 良い例
api_key = os.getenv("API_KEY")
if not api_key:
    raise ValueError("API_KEY environment variable is required")
client = OpenAI(api_key=api_key)
```

## テスト戦略

### 単体テスト
- **必須テストケース**:
  - 正常系の動作確認
  - 異常系のエラーハンドリング
  - 境界値テスト
  - null/undefined値のテスト

### 統合テスト
- **API統合テスト**:
  - 外部API呼び出しのモック
  - エラーレスポンスの処理確認
  - タイムアウト処理の確認

### E2Eテスト
- **デプロイメントテスト**:
  - 本番環境での動作確認
  - 設定値の正常読み込み確認
  - ユーザーフローの完全テスト

## 監視とアラート

### ログ管理
- **エラーログ**:
  - スタックトレースの適切な出力
  - エラー発生時の文脈情報
  - 機密情報の除外

- **パフォーマンスログ**:
  - API応答時間の監視
  - メモリ使用量の監視
  - 処理時間の計測

### アラート設定
- **エラー率の監視**:
  - 異常なエラー増加の検知
  - 特定エラーパターンの監視
  - 自動復旧処理の実装

## ドキュメント管理

### エラー対応記録
- **エラー発生時の記録**:
  - 発生日時と環境
  - エラーの詳細内容
  - 根本原因の分析
  - 修正内容と影響範囲

- **予防策の文書化**:
  - 同様エラーの予防方法
  - チェックリストの更新
  - ベストプラクティスの共有

## 継続的改善

### 定期レビュー
- **コード品質レビュー**:
  - 月次でのコード品質チェック
  - リファクタリング対象の特定
  - 技術的負債の管理

- **ツール・設定の見直し**:
  - リンター設定の最適化
  - 新しい品質チェックツールの導入
  - 開発環境の改善

### チーム共有
- **知識共有**:
  - エラーパターンの共有
  - 解決方法の文書化
  - ベストプラクティスの更新

この文書は継続的に更新し、新しいエラーパターンや予防策を追加していきます。